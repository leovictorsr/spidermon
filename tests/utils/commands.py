from spidermon.utils import commands

from importlib import import_module
from os.path import abspath, dirname, join
from pytest_mock import mocker
from scrapy.utils import project
from scrapy.settings import Settings

import pytest
import spidermon
import unittest


EXPECTED_IMPORT_STRING = "from path.to.monitor import TestMonitor"
EXPECTED_MONITOR_STRING = "[TestMonitor]"
MODULE_MONITOR = {"TestMonitor": "path.to.monitor"}
PROJECT_SETTINGS = Settings()
PROJECT_SETTINGS.setdict({"BOT_NAME": "test_bot"})
PROJECT_SETTINGS_WITH_EXTENSION = Settings()
PROJECT_SETTINGS_WITH_EXTENSION.setdict(
    {"BOT_NAME": "test_bot", "EXTENSIONS": {"test_extension": 500}}
)
EXPECTED_PROJECT_SETTINGS = "\n".join(
    [
        "# Settings generated by the Spidermon CLI",
        "SPIDERMON_ENABLED = True",
        "SPIDERMON_SPIDER_CLOSE_MONITORS = ('test_bot.monitors.SpiderCloseMonitorSuite',)",
        "EXTENSIONS = {'spidermon.contrib.scrapy.extensions.Spidermon': 500}",
    ]
)
EXPECTED_PROJECT_SETTINGS_WITH_EXTENSION = "\n".join(
    [
        "# Settings generated by the Spidermon CLI",
        "SPIDERMON_ENABLED = True",
        "SPIDERMON_SPIDER_CLOSE_MONITORS = ('test_bot.monitors.SpiderCloseMonitorSuite',)",
        "EXTENSIONS.update({'spidermon.contrib.scrapy.extensions.Spidermon': 500})",
    ]
)


@pytest.fixture
def mocker(mocker):
    mocker.patch.object(commands, "get_project_settings")
    mocker.patch.object(commands, "update_settings")
    return mocker


def test_should_return_imports_string():
    monitor_string, import_string = commands.build_monitors_strings(MODULE_MONITOR)
    assert import_string == EXPECTED_IMPORT_STRING


def test_should_return_monitors_string():
    monitor_string, import_string = commands.build_monitors_strings(MODULE_MONITOR)
    assert monitor_string == EXPECTED_MONITOR_STRING


def test_should_include_spidermon_on_settings(mocker):
    commands.get_project_settings.return_value = PROJECT_SETTINGS
    commands.enable_spidermon()
    commands.update_settings.assert_called_with(EXPECTED_PROJECT_SETTINGS)


def test_should_update_with_spidermon_extension(mocker):
    commands.get_project_settings.return_value = PROJECT_SETTINGS_WITH_EXTENSION
    commands.enable_spidermon()
    commands.update_settings.assert_called_with(
        EXPECTED_PROJECT_SETTINGS_WITH_EXTENSION
    )


def test_should_return_correct_spidermon_status(mocker):
    commands.get_project_settings.return_value = PROJECT_SETTINGS

    assert commands.is_spidermon_enabled() == None

    PROJECT_SETTINGS["SPIDERMON_ENABLED"] = False
    assert commands.is_spidermon_enabled() == False

    PROJECT_SETTINGS["SPIDERMON_ENABLED"] = True
    assert commands.is_spidermon_enabled() == True
