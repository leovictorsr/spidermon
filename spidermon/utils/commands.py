from importlib import import_module
from os.path import abspath, dirname, join
from scrapy.utils.project import get_project_settings

MONITOR_SETTINGS = [
    "# Settings generated by the Spidermon CLI",
    "SPIDERMON_ENABLED = True",
    "SPIDERMON_SPIDER_CLOSE_MONITORS = ('{}.monitors.SpiderCloseMonitorSuite',)",
]
EXTENSIONS_STRING = (
    "EXTENSIONS = {{'spidermon.contrib.scrapy.extensions.Spidermon': 500}}"
)
EXTENSIONS_UPDATE_STRING = (
    "EXTENSIONS.update({{'spidermon.contrib.scrapy.extensions.Spidermon': 500}})"
)


def build_monitors_strings(monitors):
    monitors_list = []
    imports = []
    for monitor in monitors:
        monitors_list.append(monitor)
        imports.append("from {} import {}".format(monitors[monitor], monitor))

    return "[" + ",".join(monitors_list) + "]", "\n".join(imports)


def enable_spidermon():
    project_name = get_project_settings().get("BOT_NAME")

    extensions = get_project_settings().getdict("EXTENSIONS")
    if extensions:
        formatted_settings = "\n".join(MONITOR_SETTINGS + [EXTENSIONS_UPDATE_STRING])
    else:
        formatted_settings = "\n".join(MONITOR_SETTINGS + [EXTENSIONS_STRING])

    formatted_settings = formatted_settings.format(project_name)
    update_settings(formatted_settings)


def get_settings_path():
    module = import_module(get_project_settings().get("BOT_NAME"))
    return join(abspath(dirname(module.__file__)), "settings.py")


def parse_dict(keys, value):
    keys = parse_list(keys)
    return {key: parse_int(value) for key in keys}


def parse_int(entry):
    return int(entry)


def parse_list(entry):
    items = entry.split(",")
    return [i.strip() for i in items]


def is_setting_setup(setting):
    return (
        setting in get_project_settings().attributes
        and get_project_settings().get(setting) is not None
    )


def is_spidermon_enabled():
    if is_setting_setup("SPIDERMON_ENABLED"):
        return get_project_settings().get("SPIDERMON_ENABLED")
    return False


def is_valid(user_input, setting_type):
    if setting_type == "list":
        return bool(user_input)
    try:
        return int(user_input) > 0
    except:
        return False


def parse_user_input(user_input, setting_type):
    if setting_type == "list":
        return parse_list(user_input[0])
    elif setting_type == "dict":
        return parse_dict(user_input[1], user_input[0])
    return parse_int(user_input[0])


def update_settings(settings):
    with open(get_settings_path(), "a") as f:
        f.write("\n")
        if type(settings) == list:
            f.write("\n".join(settings))
        else:
            f.write(settings)
        f.write("\n")
